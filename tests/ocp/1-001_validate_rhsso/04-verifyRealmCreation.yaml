# This step is executed after the RHSSO deployment, service, secret, route objects are created and verified.
# Reads the username and password from keycloak secret.
# Requests keycloak for an access token.
# Verifies Realm and Argo CD client creation.
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
- script: |
    # Set the needed parameter for the authorization
    KEYCLOAK_URL=$(oc get route keycloak -n $NAMESPACE -o jsonpath='{.spec.host}')
    tenant=argocd
    USER=$(oc get secret keycloak-secret -n $NAMESPACE -o jsonpath='{.data.SSO_USERNAME}' | base64 --decode)
    PASSWORD=$(oc get secret keycloak-secret -n $NAMESPACE -o jsonpath='{.data.SSO_PASSWORD}' | base64 --decode)
    GRANT_TYPE=password
    CLIENT_ID=admin-cli
    
    # Execute the CURL command to request the access-token
    access_token=$(curl -d "client_id=$CLIENT_ID" -d "username=$USER" -d "password=$PASSWORD" -d "grant_type=$GRANT_TYPE" "https://$KEYCLOAK_URL/auth/realms/master/protocol/openid-connect/token" -k | sed -n 's|.*"access_token":"\([^"]*\)".*|\1|p')

    # Execute the CURL command to verify the realm and client creation
    clientFound=$(curl -H "Content-Type: application/json" -H "Authorization: bearer $access_token" "https://$KEYCLOAK_URL/auth/admin/realms/$tenant/clients" -k | grep '"clientId":"argocd"')
    if ! [ "$clientFound" = "" ]; then
      echo "argocd realm and client creation verified"
    else
      echo "argocd client not found"
      exit 1
    fi

    # Verify OpenShift-v4 IdP creation
    IdPFound=$(curl -H "Content-Type: application/json" -H "Authorization: bearer $access_token" "https://$KEYCLOAK_URL/auth/admin/realms/$tenant/identity-provider/instances" -k | grep -i OpenShift-v4)
    if ! [ "$IdPFound" = "" ]; then
      echo "OpenShift-v4 IdP creation verified"
    else
      echo "OpenShift-v4 IdP not found"
      exit 1
    fi

    # Verify OpenShift-v4 IdP creation
    syncModeVerified=$(curl -H "Content-Type: application/json" -H "Authorization: bearer $access_token" "https://$KEYCLOAK_URL/auth/admin/realms/$tenant/identity-provider/instances" -k | grep -i '"syncMode":"FORCE"')
    if ! [ "$syncModeVerified" = "" ]; then
      echo "syncMode set to Force, verified"
    else
      echo "syncMode not set to Force"
      exit 1
    fi