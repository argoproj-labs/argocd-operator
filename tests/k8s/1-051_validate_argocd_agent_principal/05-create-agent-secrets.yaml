---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  # Wait for deployment to exist
  - command: sleep 30
  - command: kubectl get deployment argocd-agent-principal -n argocd-e2e-cluster-config
  - command: kubectl wait --for=condition=progressing --timeout=60s deployment/argocd-agent-principal -n argocd-e2e-cluster-config
  
  # Create the minimal required secrets
  - command: kubectl create secret generic argocd-redis -n argocd-e2e-cluster-config --from-literal=auth=testpassword
  - command: kubectl create secret generic argocd-agent-jwt -n argocd-e2e-cluster-config --from-literal=jwt.key="dummy-key"
  
  # Generate real TLS certificates using temporary files in current directory
  - command: openssl req -x509 -newkey rsa:2048 -keyout ./tls.key -out ./tls.crt -days 1 -nodes -subj "/CN=test"
  
  # Create proper TLS secrets
  - command: kubectl create secret tls argocd-agent-principal-tls -n argocd-e2e-cluster-config --cert=./tls.crt --key=./tls.key
  - command: kubectl create secret tls argocd-agent-ca -n argocd-e2e-cluster-config --cert=./tls.crt --key=./tls.key
  - command: kubectl create secret tls argocd-agent-resource-proxy-tls -n argocd-e2e-cluster-config --cert=./tls.crt --key=./tls.key
  
  # Clean up
  - command: rm -f ./tls.key ./tls.crt
  
  # Create cluster secrets for agents
  - command: kubectl create secret generic cluster-agent-managed -n argocd-e2e-cluster-config --from-literal=name=agent-managed --from-literal=server=https://test-server:443 --from-literal=config='{"username":"agent-managed","password":"agent-managed"}'
  - command: kubectl create secret generic cluster-agent-autonomous -n argocd-e2e-cluster-config --from-literal=name=agent-autonomous --from-literal=server=https://test-server:443 --from-literal=config='{"username":"agent-autonomous","password":"agent-autonomous"}'
  
  # Restart deployment
  - command: kubectl rollout restart deployment/argocd-agent-principal -n argocd-e2e-cluster-config
  - command: sleep 15
  - command: kubectl wait --for=condition=available --timeout=120s deployment/argocd-agent-principal -n argocd-e2e-cluster-config
  # Wait for the deployment to be fully ready with readyReplicas
  - command: kubectl wait --for=jsonpath='{.status.readyReplicas}'=1 --timeout=60s deployment/argocd-agent-principal -n argocd-e2e-cluster-config
  
  # Verify the pod is running and ports are configured correctly
  - command: bash -c "kubectl get pods -n argocd-e2e-cluster-config -l app.kubernetes.io/name=argocd-agent-principal -o jsonpath='{.items[0].status.phase}' | grep -q 'Running'"
  - command: bash -c "kubectl get deployment argocd-agent-principal -n argocd-e2e-cluster-config -o jsonpath='{.status.readyReplicas}' | grep -q '1'"
  
  # Verify the pod logs show the endpoints are starting
  - command: bash -c "kubectl logs deployment/argocd-agent-principal -n argocd-e2e-cluster-config --tail=20 | grep -q 'Starting healthz server' && echo 'Healthz server started successfully'"
  - command: bash -c "kubectl logs deployment/argocd-agent-principal -n argocd-e2e-cluster-config --tail=20 | grep -q 'Starting metrics server' && echo 'Metrics server started successfully'"